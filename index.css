* {
  margin: 0;
  padding: 0;
}
html{
  height: 100%;
            overflow: hidden;
  
}
body{
  user-select: none;
                 width: 100vw;
              height: 100vh;
              background-image: linear-gradient(45deg ,pink, purple, gray);
              background-size: 300%;
              background-position: 0% 0%;
              transform: rotate(0deg);
              /*animation: bodyR 5s alternate infinite;*/
}

            @keyframes bodyR{
              from{
                background-position: 0% 0%;
                
              }
              50% {
                0% 100%
              }
              to{
                background-position: 100% 100%;
              }
            }

/*关于格子的大小设定, 需要有一个最大值, 最小值, 中间区域可以自适应.这样比较好?*/

ul,
li {
  list-style: none;
  user-select: none;
}

.fakeBody2 {
  position: absolute;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

ul {
              transform-style:preserve-3d;
  /*给父级定下大小, 然后用flex布局对子级进行排版, 即, 父级要做好宽高设定*/
  /*用百分比,还是rem?*/
  /*如果用父级进行排版,则有个问题, 现在的排版父级的宽高时根据 2/1 的比例来设定的, 其他情况必然不是2/1*/
  /*所以这种设定不太好, 而且我们要求的是格子必须是正方形.*/
  /*如果非要这么做, 有没有办法?*/
  /*如果游戏开始时, 列数和行数是确定的, 在初始化时, 根据这个比例进行对css的设置?*/
  /*可以尝试一下, 如果不行, 就用子级调整宽高, 父级撑开的方法*/
  /*问题, flex布局 如何进行表格布局?*/
  /*当只有一个层级时, 需要确定子级的宽高才能实现自然转行.*/
  /*但自己的宽高无法通过百分比来实现*/
  /* 所以先不用flex 直接用百分比吧*/
  width: 100vw;
  /*下面这一堆先不用了, 响应式的处理, 给了js*/
  /*max-width: 900px;*/
  /*max-height: 450px;*/
  /*min-width: 475px;*/
  /*min-height: 238px;*/
  /*border: 1px solid black;*/
  font-size: 0;
  /*居中*/
  /*position: relative;
  left: 50%;
  top: 0;
  transform: translate(-50%, 0);*/
}

li {
  display: inline-block;
  box-sizing: border-box;
  /*border-collapse: collapse; 竟然失效.*/
  width: calc(80vw / 30);
  height: calc(80vw / 30);
  font-size: 2vw;
  background-color: whitesmoke;
  font-weight: bold;
  text-align: center;
  vertical-align: top;
  /*没有这一句, 按照目前的样式布局, 会出现问题*/
}

            .son{
              perspective : 800px;
              transform-style: preserve-3d;
              backface-visibility: hidden;
              position: relative;
              transform: scale(0.8) rotateX(-10deg) rotateY(10deg);
              /*animation: round linear 2.5s infinite;*/
            }
            
            
              .son div{
              position: absolute;
              left: 0;
              top: 0;
              
              width: 100%;
              height: 100%;
             
            }
           /* 立体方形*/
           /*此处不能用25px! 也需要用js 有点麻烦, 所以最好是用rem */
             .front{
             /*transform: rotate(0deg) translateZ(50%) scale(0.8);*/
             background-color: #00438A; 
           }
           .left{
             /*transform: rotateY(-90deg) translateZ(50%)  scale(0.8);*/
             background-color: #159159;
             
           }
           .right{
             
             /*transform: rotateY(90deg) translateZ(50%)  scale(0.8);*/
             background-color: #153987;
           }
           .up{
             /*transform: rotateX(90deg) translateZ(50%)  scale(0.8);*/
             background-color: #265285;
             
           }
           .down{
             /*transform: rotateX(-90deg) translateZ(50%) scale(0.8);*/
             background-color: #A52A2A;
             
           }
           .back{
             /*transform: rotateX(180deg) translateZ(50%) scale(0.8);*/
             background-color: aquamarine;
           }
            
            /*浮动态 5种*/
            @keyframes round{
              from{
                transform: rotateY(0deg) scale(0.8);
              }
              20% {
                transform: rotateX(5deg) scale(0.8);
              }
              40% {
                transform: rotateY(-5deg) scale(0.8);
              }
              60% {
                transform: rotateX(-5deg) scale(0.8);
              }
              80% {
                transform: rotateY(5deg) scale(0.8);
              }
              to{
                transform: rotateY(0deg) scale(0.8);
              }
            }
            @keyframes round1{
              from{
                transform: rotateX(0deg) rotateY(180deg) scale(0.8);
              }
              20% {
                transform: rotateX(5deg) rotateY(180deg) scale(0.8);
              }
              40% {
                transform: rotateX(0deg) rotateY(175deg) scale(0.8);
              }
              60% {
                transform: rotateX(-5deg) rotateY(180deg) scale(0.8);
              }
              80% {
                transform: rotateX(0deg) rotateY(185deg) scale(0.8);
              }
              to{
                transform: rotateX(0deg) rotateY(180deg) scale(0.8);
              }
            }
            @keyframes round2{
              from{
                transform: rotateX(0deg) rotateY(-180deg) scale(0.8);
              }
              20% {
                transform: rotateX(5deg) rotateY(-180deg) scale(0.8);
              }
              40% {
                transform: rotateX(0deg) rotateY(-175deg) scale(0.8);
              }
              60% {
                transform: rotateX(-5deg) rotateY(-180deg) scale(0.8);
              }
              80% {
                transform: rotateX(0deg) rotateY(-185deg) scale(0.8);
              }
              to{
                transform: rotateX(0deg) rotateY(-180deg) scale(0.8);
              }
            }
            @keyframes round3{
              from{
                transform: rotateY(0deg) rotateX(180deg) scale(0.8);
              }
              20% {
                transform: rotateY(5deg) rotateX(180deg) scale(0.8);
              }
              40% {
                transform: rotateY(0deg) rotateX(175deg) scale(0.8);
              }
              60% {
                transform: rotateY(-5deg) rotateX(180deg) scale(0.8);
              }
              80% {
                transform: rotateY(0deg) rotateX(185deg) scale(0.8);
              }
              to{
                transform: rotateY(0deg) rotateX(180deg) scale(0.8);
              }
            }
            @keyframes round4{
              from{
                transform: rotateY(0deg) rotateX(-180deg) scale(0.8);
              }
              20% {
                transform: rotateY(5deg) rotateX(-180deg) scale(0.8);
              }
              40% {
                transform: rotateY(0deg) rotateX(-175deg) scale(0.8);
              }
              60% {
                transform: rotateY(-5deg) rotateX(-180deg) scale(0.8);
              }
              80% {
                transform: rotateY(0deg) rotateX(-185deg) scale(0.8);
              }
              to{
                transform: rotateY(0deg) rotateX(-180deg) scale(0.8);
              }
            }
            /*临街翻转8种*/
            .dir1 {
              animation: dir1 1s 1;
            }
            
            @keyframes dir1{
              from{
                transform: rotateY(0deg);
              }
              50% {
                transform: rotateY(45deg);
              }
              to{
                transform: rotateY(0deg);
              }
            }
            .dir2 {
              animation: dir2 1s 1;
            }
            @keyframes dir2{
              from{
                transform: rotateY(0deg);
              }
              50% {
                transform: rotateY(-45deg);
              }
              to{
                transform: rotateY(0deg);
              }
            }
            .dir3 {
              animation: dir3 1s 1;
            }
            @keyframes dir3{
              from{
                transform: rotateX(0deg);
              }
              50% {
                transform: rotateX(45deg);
              }
              to{
                transform: rotateX(0deg);
              }
            }
            .dir4 {
              animation: dir4 1s 1;
            }
            @keyframes dir4{
              from{
                transform: rotateX(0deg);
              }
              50% {
                transform: rotateX(-45deg);
              }
              to{
                transform: rotateX(0deg);
              }
            }
            .dir5 {
              animation: dir5 1s 1;
            }
            @keyframes dir5{
              from{
                transform: rotateY(0deg) rotateX(0deg);
              }
              50% {
                transform: rotateY(45deg) rotateX(-45deg);
              }
              to{
                transform: rotateY(0deg) rotateX(0deg);
              }
            }
            .dir6 {
              animation: dir6 1s 1;
            }
            @keyframes dir6{
              from{
                transform: rotateY(0deg) rotateX(0deg);
              }
              50% {
                transform: rotateY(-45deg) rotateX(-45deg);
              }
              to{
                transform: rotateY(0deg) rotateX(0deg);
              }
            }
            .dir7 {
              animation: dir7 1s 1;
            }
            @keyframes dir7{
              from{
                transform: rotateY(0deg) rotateX(0deg);
              }
              50% {
                transform: rotateY(-45deg) rotateX(45deg);
              }
              to{
                transform: rotateY(0deg) rotateX(0deg);
              }
            }
            .dir8 {
              animation: dir8 1s 1;
            }
            @keyframes dir8{
              from{
                transform: rotateY(0deg) rotateX(0deg);
              }
              50% {
                transform: rotateY(45deg) rotateX(45deg);
              }
              to{
                transform: rotateY(0deg) rotateX(0deg);
              }
            }
            
            /*翻转180deg八种*/
            .turn1{
              animation: turn1 1s 1 forwards;
            }
            @keyframes turn1{
              from{
                transform: rotateY(10deg) rotateX(10deg) scale(0.8);
              }
              to{
                transform:  rotateY(190deg) rotateX(10deg)  scale(0.8);
              }
            }
            .turn2{
              animation: turn2 1s 1 forwards;
            }
            @keyframes turn2{
              from{
                transform: rotateY(0deg) rotateX(0deg);
              }
              to{
                transform: rotateY(-180deg) rotateX(0deg);
              }
            }
            .turn3{
              animation: turn3 1s 1 forwards;
            }
            @keyframes turn3{
              from{
                transform: rotateY(0deg) rotateX(0deg);
              }
              to{
                transform: rotateY(0deg) rotateX(180deg);
              }
            }
            .turn4{
              animation: turn4 1s 1 forwards;
            }
            @keyframes turn4{
              from{
                transform: rotateY(0deg) rotateX(0deg);
              }
              to{
                transform: rotateY(0deg) rotateX(-180deg);
              }
            }
            .turn5{
              animation: turn5 1s 1 forwards;
            }
            @keyframes turn5{
              from{
                transform: rotateY(0deg) rotateX(0deg);
              }
              to{
                transform: rotate3d(1,1,0,180deg);
              }
            }
            .turn6{
              animation: turn6 1s 1 forwards;
            }
            @keyframes turn6{
              from{
                transform: rotateY(0deg) rotateX(0deg);
              }
              to{
                transform: rotate3d(-1,1,0,180deg);
              }
            }
            .turn7{
              animation: turn7 1s 1 forwards;
            }
            @keyframes turn7{
              from{
                transform: rotateY(0deg) rotateX(0deg);
              }
              to{
                transform: rotate3d(1,-1,0,180deg);
              }
            }
            .turn8{
              animation: turn8 1s 1 forwards;
            }
            @keyframes turn8{
              from{
                transform: rotateY(0deg) rotateX(0deg);
              }
              to{
                transform: rotate3d(-1,-1,0,180deg);
              }
            }

.a0 {
  background-color: purple;
  color: transparent;
}

.a1 {
  color: blue;
}

.a2 {
  color: blueviolet;
}

.a3 {
  color: brown;
}

.a4 {
  color: #00BBEE;
}

.a5 {
  color: #00438A;
}

.a6 {
  color: chocolate;
}

.a7 {
  color: crimson;
}

.a8 {
  color: green;
}

.a9 {
  color: black;
}

.a10 {
  background-color: purple;
  color: pink;
}

.que {
  color: black;
}
.mark {
  color: deeppink;
}

.menu {
  width: 7vw;
  height: 70vh;
  min-width: 37px;
  min-height: 37px; 
  font-size: 1.8vw;
  text-align: center;
  line-height: 5vw;
  position: fixed;
  left: 0%;
  top: 50%;
  transform: translate(50%, -50%);
  
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}
.menu div{
  width: 5vw;
  height: 5vw;
  border: 1px solid black;
  border-radius: 50%;
  overflow: hidden;
}
.menuD {
  width: 7vh;
  height: 70vw;
  min-width: 37px;
  min-height: 37px; 
  font-size: 1.8vh;
  text-align: center;
  line-height: 5vh;
  position: fixed;
  left: 10%;
  top: 50%;
  transform: translate(50%, -50%);
  
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}
.menuD div{
  width: 5vh;
  height: 5vh;
  border: 1px solid black;
  border-radius: 50%;
  overflow: hidden;
}

/*.restart {
}

.showTime {
  width: 7vw;
  height: 7vw;
  min-width: 37px;
  min-height: 37px;
  font-size: 2vw;
  border: 1px solid black;
  text-align: center;
  line-height: 7vw;
  border-radius: 50%;
  position: fixed;
  left: 70%;
  top: 0%;
  transform: translate(-50%, 50%);
}

.showBoom {
  width: 7vw;
  height: 7vw;
  min-width: 37px;
  min-height: 37px;  font-size: 2vw;
  border: 1px solid black;
  text-align: center;
  line-height: 7vw;
  border-radius: 50%;
  position: fixed;
  left: 30%;
  top: 0%;
  transform: translate(-50%, 50%);
}*/

/*弄一下初始化的弹窗*/
/* 首先他是要display:none 的*/
/* 其次*要进行绝对定位, 并且要在其他元素之上/
 * 当点击开始游戏之后,要消失
 * 
 * 用的是四列
 * 我们可以尝试用flex 布局
 */

.fakeBody {
  width: 100vw;
  height: 100vh;
  background-color: white;
  position: absolute;
  left: 0;
  top: 0;
  z-index: 98;
}

.options {
  width: 30vw;
  height: 40vw;
  border: 1px solid #CCCCCC;
  border-radius: 5%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-around;
  
  background-color: white;
  
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%,-50%);
  z-index: 99;
}

.options div{
  display: flex;
  justify-content: space-around;
  width: 100%;
  height: 3vw;
}

.options div *{
  display: block;
  width: 30%;
  height: 100%;
  text-align: center;
  flex-grow: 1;
  font-size: 1.5vw;
  border: 1px solid #CCCCCC;
  line-height: 3vw;
  font-weight: bold;
  border-radius: 10%;
}
